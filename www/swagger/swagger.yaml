swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "WOSS Booking"
host: "api.booking.knine.xyz"
tags:
- name: "profile"
  description: "Personal information of current user"
- name: "properties"
  description: "API that manages properties"
- name: "comments"
  description: "API that manages comments of a property"
- name: "reservation"
  description: "API that manages reservations"
schemes:
- "https"
securityDefinitions:
  # --[PROBLEM]--
  # SwaggerUI source code is looking for access_token (in oauth2 flow) variable to make API calls by default
  # BUT API Gateway requires us to use id_token in this scenario
  # So, by default, it is not possible to integrate SwaggerUI with AWS Cognito
  # --[WORKAROUND]--
  # The access_token regex in SwaggerUI source code was replaced with id_token regex! 
  Customers:
    description: Customers
    type: oauth2
    flow: accessCode
    tokenUrl: https://booking-user-pool-domain-customer.auth.eu-central-1.amazoncognito.com/oauth2/token
    authorizationUrl: https://booking-user-pool-domain-customer.auth.eu-central-1.amazoncognito.com/oauth2/authorize?redirect_uri=https%3A%2F%2Flanding.booking.knine.xyz%2Fswagger%2Foauth2-redirect.html&client_id=5vpqdi2hlkvqjsjqd3gsama9c8&response_type=code
    scopes:
      profile: Basic profile data access
      email: Email data access
      openid: Please tick this scope for the auth to work
  Hosts:
    description: Hosts
    type: oauth2
    flow: accessCode
    tokenUrl: https://booking-user-pool-domain-host.auth.eu-central-1.amazoncognito.com/oauth2/token
    authorizationUrl: https://booking-user-pool-domain-host.auth.eu-central-1.amazoncognito.com/oauth2/authorize?redirect_uri=https%3A%2F%2Flanding.booking.knine.xyz%2Fswagger%2Foauth2-redirect.html&client_id=4o98dleg8r6uqi1g09ctoua1cg&response_type=code
    scopes:
      profile: Basic profile data access
      email: Email data access
      openid: Please tick this scope for the auth to work
paths:
  /customers/profile:
    get:
      summary: Returns customer's profile data.
      description: >
        Returns profile data of currently authorized user, if he is customer.
      tags:
      - "profile"
      security:
      - Customers: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/CustomerProfileResponse"
    put:
      summary: Updates customer's profile data.
      description: "Updates profile data of currently authorized user, if he is customer.\n\n
      `avatarFileName` is string that will represent last part of path to uploaded property image, so be careful with
      image format\n\n
      `avatarBase64` is string that represents image in `base64` format"
      tags:
      - "profile"
      security:
      - Customers: [email, profile, openid]
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            avatarFileName:
              type: string
            avatarBase64:
              type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/CustomerProfileResponse"

  /customers/reservation:
    get:
      summary: Returns customer's reservations
      tags:
      - "profile"
      security:
      - Customers: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            type: array
            items: 
              $ref: "#/definitions/ReservationResponse"

  /hosts/profile:
    get:
      summary: Returns hosts profile data.
      description: >
        Returns profile data of currently authorized user, if he is host.
      tags:
      - "profile"
      security:
      - Hosts: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/HostProfileResponse"
    put:
      summary: Updates hosts profile data.
      description: "Updates profile data of currently authorized user, if he is host.\n\n
      `avatarFileName` is string that will represent last part of path to uploaded property image, so be careful with
      image format\n\n
      `avatarBase64` is string that represents image in `base64` format"
      tags:
      - "profile"
      security:
      - Hosts: [email, profile, openid]
      parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            avatarFileName:
              type: string
            avatarBase64:
              type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/HostProfileResponse"
  /hosts:
    get:
      summary: [ADMIN] Returns all hosts profile data
      description: >
        Returns profile data of all hosts, if the actor is host and he is admin.
      tags:
      - "profile"
      security:
      - Hosts: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            type: "array"
            items:
              $ref: "#/definitions/HostProfileResponse"
  /hosts/{hostId}/markAdmin:
    put:
      summary: [ADMIN] Marks specified host as an admin
      description: >
        Marks the specified host as an admin, if the actor is host and he is admin.
      tags:
      - "profile"
      parameters:
      - in: path
        name: hostId
        type: string
        required: true
      - in: body
        name: body
        schema: 
          type: object
          properties:
            isAdmin:
              type: boolean
      security:
      - Hosts: [email, profile, openid]
      responses:
        204:
          description: Success
  /properties:
    get:
      summary: Return list of properties. 
      description: >
        Returns list of all properties existing in database.
      tags:
      - "properties"
      responses:
        200:
          description: Success
          schema:
            type: array
            items: 
              $ref: "#/definitions/PropertyResponse"
    post:
      summary: Creates new property. 
      description: 
        "Creates new property in database and return is as object.\n\n
        `cover_image_file_name` is string that will represent last part of path to uploaded property image, so be careful
        with image format\n\n
        `cover_image_base64` is string that represents image in `base64` format"
      tags:
      - "properties"
      parameters:
      - in: body
        name: body
        schema: 
          $ref: '#/definitions/CreatePropertyRequest'
      security:
        - Hosts: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/PropertyResponse'

  /properties/{id}:
    get:
      summary: Returns property based on it`s id.
      description: >
        Returns property based on it's `id`, which is `uuid` string.
      tags:
      - "properties"
      parameters:
      - in: path
        name: id
        type: string
        required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/PropertyResponse'
    put:
      summary: Updates property defined by id.
      description:
        "Updates property in database and return is as object.\n\n
        `cover_image_file_name` is string that will represent lats part of path to uploaded property image, so be careful
        with image format\n\n
        `cover_image_base64` is string that represents image in `base64` format"
      tags:
      - "properties"
      parameters:
      - in: path
        name: id
        type: string
        required: true
      - in: body
        name: body
        schema: 
          $ref: '#/definitions/UpdatePropertyRequest'
      security:
        - Hosts: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/PropertyResponse'

  /properties/{id}/rate:
    put:
      summary: Adds property rating
      tags:
      - "properties"
      parameters:
      - in: path
        name: id
        type: string
        required: true
      - in: body
        name: body
        schema:
          type: object
          properties:
            rating:
              type: number
      security:
        - Customers: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/PropertyResponse'

  /properties/{id}/confirm:
    put:
      summary: [ADMIN] Confirms property
      tags:
      - "properties"
      parameters:
      - in: path
        name: id
        type: string
        required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/PropertyResponse'

  /properties/{id}/images:
    post:
      summary: Adds an image to the property with specified id
      description:
        "Adds an image to the property in database and returns the property object.\n\n
        `image_file_name` is string that will represent lats part of path to uploaded property image, so be careful
        with image format\n\n
        `image_base64` is string that represents image in `base64` format"
      tags:
      - "properties"
      parameters:
      - in: path
        name: id
        type: string
        required: true
      - in: body
        name: body
        schema: 
          $ref: '#/definitions/AddPropertyImageRequest'
      security:
        - Hosts: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/PropertyResponse'

  /properties/{id}/images/{imageId}:
    delete:
      summary: Removes an image from the property with specified id
      description:
        "Removes an image from the property with specified id"
      tags:
      - "properties"
      parameters:
      - in: path
        name: id
        type: string
        required: true
      - in: path
        name: imageId
        type: number
        required: true
      security:
        - Hosts: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/PropertyResponse'

  /properties/{id}/images/order:
    put:
      summary: Reorders the images of the property property with specified id
      description:         
        "Reorders the images in the property according to specified order"
      tags:
      - "properties"
      parameters:
      - in: path
        name: id
        type: string
        required: true
      - in: body
        name: body
        schema: 
          $ref: '#/definitions/ReorderPropertyImagesRequest'
      security:
        - Hosts: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/PropertyResponse'

  /properties/{id}/comments:
    get:
      summary: Returns list of comments for specific property. 
      description: >
        The path for requesting a list of comments for a specific property represented by unique `id`, which is `uuid` string.
      tags:
      - "comments"
      parameters:
      - in: path
        name: id
        type: string
        required: true
      responses:
        200:
          description: Success
          schema:
            type: array
            items: 
              $ref: '#/definitions/CommentResponse'
    post:
      summary: Creates comment for specific property and returns it as object. 
      description: 
        "Required query params: `id`, `uuid` string.\n\n
         Required body values: `text`, string that represents someone`s comment."
      tags:
      - "comments"
      parameters:
      - in: path
        name: id
        type: string
        required: true
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            text:
              type: string
          required:
          - text
      security:
        - Customers: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/CommentResponse'

  /properties/{id}/reservation/available-count:
    get:
      summary: Returns property available rooms count
      tags:
      - "properties"
      parameters:
      - in: path
        name: id
        type: string
        required: true
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              availableRoomsCount:
                type: number

  /reservation:
    post:
      summary: Creates reservation
      tags:
      - "reservation"
      parameters:
      - in: body
        name: body
        schema: 
          type: object
          properties:
            propertyId:
              type: string
              format: uuid
            bookedRoomsNumber:
              type: number
            beginDate:
              type: string
              format: data-time
            endDate:
              type: string
              format: data-time
      security:
      - Customers: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/ReservationResponse"

  /reservation/{id}:
    delete:
      summary: Removes reservation
      tags:
      - "reservation"
      parameters:
      - in: path
        name: id
        type: string
        required: true
      security:
      - Customers: [email, profile, openid]
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ReservationResponse'

definitions:
  CustomerProfileResponse:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      username:
        type: "string"
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      avatarUrl:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"

  HostProfileResponse:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      username:
        type: "string"
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      avatarUrl:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      isAdmin:
        type: "boolean"

  CreatePropertyRequest:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      cover_image_file_name:
        type: "string"
      cover_image_base64:
        type: "string"
      address:
        type: string
      city:
        type: string
      country:
        type: string
      opportunities:
        type: array
        items:
          type: string
      price:
        type: number
      landmarks:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            distance:
              type: number
      totalRoomsNumber:
        type: number

  UpdatePropertyRequest:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      cover_image_file_name:
        type: "string"
      cover_image_base64:
        type: "string"
      address:
        type: string
      city:
        type: string
      country:
        type: string
      opportunities:
        type: array
        items:
          type: string
      price:
        type: number
      landmarks:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            distance:
              type: number

  PropertyResponse:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      description:
        type: "string"
      created_date:
        type: "string"
        format: "date"
      cover_image_url:
        type: "string"
      images:
        type: array
        items:
              $ref: "#/definitions/PropertyImageResponse"
      address:
        type: string
      city:
        type: string
      country:
        type: string
      opportunities:
        type: array
        items:
          type: string
      price:
        type: number
      landmarks:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            distance:
              type: number
      totalRoomsNumber:
        type: number
      rating:
        type: number
      isConfirmed:
        type: boolean

  PropertyImageResponse:
    type: object
    properties:
      id:
        type: number
      url:
        type: string

  AddPropertyImageRequest:
    type: "object"
    properties:
      image_base64:
        type: "string"
      image_file_name:
        type: "string"

  ReorderPropertyImagesRequest:
    type: "object"
    properties:
      imageIdsInOrder:
        type: "array"
        items:
            type: integer

  CommentResponse:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      text:
        type: "string"
      propertyId:
        type: "string"
        format: "uuid"
      author:
        type: object
        properties:
          id:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          avatarUrl:
            type: string
      moodType:
        description: "The mood of the comment determined by a ML algorithm"
        type: string
        enum: [negative, neutral, positive]
      createdDate:
        type: "string"
        format: "date-time"

  ReservationResponse:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      propertyId:
        type: "string"
        format: "uuid"
      customerId:
        type: "string"
        format: "uuid"
      bookedRoomsNumber:
        type: "number"
      beginDate:
        type: "string"
        format: "date-time"
      endDate:
        type: "string"
        format: "date-time"